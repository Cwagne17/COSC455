;; have quote before list then treated as data, if quote isn't there then it is treated as operation

(car '(1 2 3 4)) ;; get head

(cdr '(1 2 3 4)) ;; gets tail

(cons 'a '(b c d)) ;; constructs a list

(null '(1 2 3)) ;; outputs nil

(null ()) ;; outputs t

(defun double (a)
       "Multiplies input by two"
       (* 2 a)
)

(double 12)

;; take first element
;; do what you want
;; pass tail into function again

(atom '(3 4 5)) ;; returns nil
(atom 'a) ;; returns t

(defun lat (l)
       "return true is all members are atoms"
       (cond
	( (null l) t)
	( (atom (car l)) (lat (cdr l)))
	( t nil)
       )
)

(lat '(4 5 6))
(lat '(4 (5 6) 8))

(eq 'ab 'ab)

(defun eqlist (l1 l2)
       "compare whether two lists are equal"
       (cond
	( (and (null l1)(null l2)) t)
	( (eq (car l1)(car l2)) (eqlist (cdr l1)(cdr l2)))
	( t nil)
       )
)

(eqlist '(1 2 3) '(1 2 3))
(eqlist '(1 2 3) '(1 2 4))
(eqlist '(1 2 '()) '(1 2 3))

(defun member (a ls)
     "returns whether an atom is the member of a list"
     (cond
	( (null ls) nil)
	( (eq a (car ls)) t)
	( t (member a (cdr ls)))
     )
)

(member 2 '(4 6 2 9))
(member 2 '(4 6 3 9))

(defun nonlat (ls)
       "returns true if all members are not atoms"
       (cond
	((null ls) t)
	((not (atom (car ls))) (nonlat (cdr ls)))
	(t nil)
       )
)

(nonlat '(1 2 3))
(nonlat '((1)))

(defun rember (x l)
       "Remove the first occurance of x from list l"
       (cond
	((null l) l)
	((eq x (car l)) (cdr l))
	(t (cons (car l) (rember x (cdr l))))
       )
)

;; (rember 2 '(1 3 2))
;; (rember 2 '(2 3 1))
;; (rember 2 '(2 3 1 2))
;; (rember 2 '(3 2 1))

(defun sumlist (l)
       "returns sum of the list of atoms"
       (cond
	((null l) 0)
       	(t (+ (car l) (sumlist (cdr l))))
       )
)

(sumlist '(1 2 3 4))
