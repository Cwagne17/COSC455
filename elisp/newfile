;; have quote before list then treated as data, if quote isn't there then it is treated as operation

(car '(1 2 3 4)) ;; get head

(cdr '(1 2 3 4)) ;; gets tail

(cons 'a '(b c d)) ;; constructs a list

(null '(1 2 3)) ;; outputs nil

(null ()) ;; outputs t

(defun double (a)
       "Multiplies input by two"
       (* 2 a)
)

(double 12)

;; take first element
;; do what you want
;; pass tail into function again

(atom '(3 4 5)) ;; returns nil
(atom 'a) ;; returns t

(defun lat (l)
       "return true is all members are atoms"
       (cond
	( (null l) t)
	( (atom (car l)) (lat (cdr l)))
	( t nil)
       )
)

(lat '(4 5 6))
(lat '(4 (5 6) 8))

(eq 'ab 'ab)

(defun eqlist (l1 l2)
       "compare whether two lists are equal"
       (cond
	( (and (null l1)(null l2)) t)
	( (eq (car l1)(car l2)) (eqlist (cdr l1)(cdr l2)))
	( t nil)
       )
)

;; (eqlist '(1 2 3) '(1 2 3))
;; (eqlist '(1 2 3) '(1 2 4))
;; (eqlist '(1 2 '()) '(1 2 3))

(defun member (a ls)
     "returns whether an atom is the member of a list"
     (cond
	( (null ls) nil)
	( (eq a (car ls)) t)
	( t (member a (cdr ls)))
     )
)

;; (member 2 '(4 6 2 9))
;; (member 2 '(4 6 3 9))

(defun nonlat (ls)
       "returns true if all members are not atoms"
       (cond
	((null ls) t)
	((not (atom (car ls))) (nonlat (cdr ls)))
	(t nil)
       )
)

(nonlat '(1 2 3))
(nonlat '((1)))

(defun rember (x l)
       "Remove the first occurance of x from list l"
       (cond
	((null l) l)
	((eq x (car l)) (cdr l))
	(t (cons (car l) (rember x (cdr l))))
       )
)

;; (rember 2 '(1 3 2))
;; (rember 2 '(2 3 1))
;; (rember 2 '(2 3 1 2))
;; (rember 2 '(3 2 1))

(defun rember2 (x l)
       "Remove the second occurance of x in a list l"
       (cond
	((null l) l)
	((eq x (car l)) (cons x (rember x (cdr l))))
	(t (cons (car l) (rember2 x (cdr l))))
       )
)

;; (rember2 2 '(3 2 4 2 4 5))

(defun sumlist (l)
       "returns sum of the list of atoms"
       (cond
	((null l) 0)
       	(t (+ (car l) (sumlist (cdr l))))
       )
)

(sumlist '(1 2 3 4))

(defun firsts (l)
       "Returns new list of the heads of each of the lists in the param list"
       (cond
	((null l) '())
	(t (cons (car(car l)) (firsts (cdr l))))
       )
)

;; (firsts '( (1 2) (2 3) (3 4) ))

(defun replace (old new list)
       "Replace first occurance of old with new"
       (cond
	((null list) '())
	( (eq (car list) old) (cons new (cdr list)))
	(t (cons (car list) (replace old new (cdr list))))
       )
)

;; (replace 'fruit 'candy '(flower fruit icecream))
;; (replace 'fruit 'candy '(fruit flower fruit icecream))

(defun replaceAll (old new list)
       "Replace all occurances of old with new"
       (cond
	((null list) '())
	( (eq (car list) old) (cons new (replaceAll old new (cdr list))))
	(t (cons (car list) (replaceAll old new (cdr list))))
       )
)

;; (replaceAll 'fruit 'candy '(flower fruit icecream))
;; (replaceAll 'fruit 'candy '(fruit flower fruit icecream))

(defun insertR (old new list)
       "Inserts new to the right of old in the list"
       (cond
	( (null list) '() )
	( (eq (car list) old) (cons (car list) (cons new (cdr list))) )
	( t (cons (car list) (insertR old new (cdr list))) )
       )
)

;; (insertR 2 5 '(1 3 2 6 9))
;; (insertR 2 5 '(2 1 3 2 6 9))

(defun insertAllR (old new list)
       "Inserts new to the right of old in the list"
       (cond
	( (null list)
	  	list
	)
	( (eq (car list) old)
	        (cons (car list) (cons new (insertAllR old new (cdr list))))
	)
	( t
		(cons (car list) (insertAllR old new (cdr list)))
	)
       )
)

;; (insertAllR 2 5 '(1 3 2 6 9))
;; (insertAllR 2 5 '(2 1 3 2 6 9))

(defun pick (n l)
       "Return the nth element"
       (cond
	( (null l)
	  	nil
	)
	( (eq n 1)
	      (car l)
	)
	( t
	      (pick (- n 1) (cdr l))
	)
       )
)

;; (pick 1 '(2 3 4))
;; (pick 2 '(2 3 4))
;; (pick 4 '(2 3 4))

(defun leftmost (l)
	"Return the leftmost item in the list regardless if it is nested"
	(cond
	 ( (null l) nil)
	 ( (atom (car l)) (car l) )
	 ( t (leftmost (car l)))
	)
)

;; all return 3
;; (leftmost '(3 (4 5) 6))
;; (leftmost '((3) (4 5) 6))
;; (leftmost '(((((3)))) 4 (5 6)))


(car (car '((3 4) 5 6)))
(caddr '((3 4) 5 6))

(setq a 10) ;; sets the variables a = 10
a

(setq mylist '(2 4 6 8)) ;; sets the variable mylist = (2 4 6 8)
mylist
(car mylist)
(cdr mylist)

(if (> a 20) (+ a 1) (- a 1)) ;; if [a > 20]; then a + 1 else a - 1 fi
a ;; if doesn't change value, would require another setq

(set 'a 9) ;;
a

(cons 1 '(5 6 7)) ;; current use
(setq mycons (cons 2 4)) ;; can be used to create a dictionary key value atom pairs
(cdr mycons)

(defun count(x l)
       "Count number of occur of x in l"
       (cond
	((null l) 0)
	((eq x (car l)) (+ 1 (count x (cdr l))))
	(t (count x (cdr l)))
       )
)

(defun occurN (l1 l2)
       "Returns the total number of times that a member of l1 appears in l2"
       (cond
	((null l1) 0)
	(t (+ (count (car l1) l2) (occurN (cdr l1) l2)))
       )
)

;; (occurN '(1 2) '(3 2 4 1 2 3 1))